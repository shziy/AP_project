import pandas as pd
import importlib
import random
from openpyxl import Workbook , load_workbook
import os
if (os.path.exists("infofile.xlsx") == False):
    w=Workbook()
    file=w.active
    file.append(['name','how','time'])
    file.freeze_panes = 'A2'
    w.save('infofile.xlsx')
else:
    pass

class infooo:       
    def get_info(self):
         
        while True:
              self.address = {'shahrestan':int(input('sharestan(1 for teh):')),'shahr':input('shahr:'),'joz':input('')}
              
              self.postcode=input('')
              if not self.postcode.isdigit(): # check if a string contains a number with .isdigit()
                  print ("Enter only numbers\n")
                  continue
              elif len(self.postcode) != 10:
                  print ("Enter 10 digits\n")
                  continue
              else: 
                  break
    
        self.phone = input('phone:')
        self.name = input('name:')
        self.time = int(input('time:'))
        
        self.new = [self.name,('post' if self.address['shahrestan']==1 else 'peyk'),self.time]       
        w=load_workbook('infofile.xlsx')
        file=w.active
        file.append(self.new)
        w.save('infofile.xlsx')
        self.when_send()
    
    def when_send(self):
      info = pd.read_excel("infofile.xlsx")
      info['time'] = info['time'].apply(lambda x: 'noon' if x in range(12,15) else ('evening' if x in range(15,18) else 'morning'))
      if info['time'].iloc[-1] in range(12,15):  
          if info[info.time == 'noon'].shape[0]<3:
            info["time"].iloc[-1] = 'noon'
          else:
            info['time'].iloc[-1]='morning'
      elif info['time'].iloc[-1] in range(15,18):  
          if info[info.time == 'evening'].shape[0]<3:
            info["time"].iloc[-1] = 'eveing'            
          else:  
            info['time'].iloc[-1]='morning'      
      else: 
          info['time'].iloc[-1]='morning'
      info.to_excel('infofile.xlsx',index=False)
        
class Order:
    def __init__(self):
        self.cart_item = pd.DataFrame()
    def check_quantity(self,items,id,quantity,color): 
            called_item = items.loc[(items['id'] == id) & (items['color'] == color)]
            if (quantity <= called_item['stock']).any():
                return True
            elif (quantity > called_item['stock']).any() or called_item['stock']=='unavailable':
                return False
    def add_to_cart(self):     
            while True:
                
                m = importlib.import_module(input('shoes or bags :').capitalize())   #choose 
                df = m.items   
                print(df.to_string(index=False))
                id = int(input('select the id of what u want:'))
                quantity = int(input('how many?: '))
                print(df.loc[df['id']==id,'color'].to_string(index=False))   #print colors to choose from     
                color = input('which color?: ')
                if self.check_quantity(df,id,quantity,color):          
                      called_item = df.loc[(df['id'] == id) & (df['color'] == color),['id','name','color','unit price']]
                      called_item['quantity'] = quantity
                      called_item['total price'] = called_item['quantity']*called_item['unit price']
                      self.cart_item = self.cart_item._append(called_item)
                      # i=Inventory()
                      # i.update(id,quantity,color)                
                      checkout = input ('checkout?: ').capitalize()
                      if checkout == 'Yes':
                          self.cart_item.loc['total'] = self.cart_item.loc[:,['quantity','total price']].sum(numeric_only=True)
                          print(self.checkout())               
                          break;
                      continue;
                else:
                      print('insufficient inventory')
                      continue;

    def checkout(self):
        c = infooo()
        c.get_info()
        #enter a port
        
        self.order_no = random.randint(10**10,10**11)
        
        self.card_no = (input('enter your card number: ')) 
        
        def confirm(self):
            if len(self.card_no)==16:
                return True                                        
            else:
                return False
            
        if confirm(self):
                #save confirmation as txt file
                f = open("conf.txt", "w+")
                f.writelines(["payment status :successful \n",f"name : {c.name} \n",f"card.no:{self.card_no} \n"])
                f.close() 
                #save factor as txt file
                f = open("factor.txt", "w+")
                f.writelines([f"{self.cart_item.fillna('')} \n","*******\n"])
                f.close()
                h = Accounting()
                h.hh()
                return open("conf.txt","r+").read() + open("factor.txt","r+").read()
        else:
                #save confirmation as txt file
                f = open("conf.txt", "w+")
                f.writelines(["payment status :unsuccessful \n",f"name : {c.name} \n",f"card.no:{self.card_no} \n"])
                f.close()   
                return open("conf.txt","r+").read() 

            
      





